///////////////////////////////////
/////Arrow Functions 2

//ES5
var box5 = {
	color: "green",
	position: 1,
	clickMe: function(){
		
		var self = this;
		// store the variable and then you can use the this key word with the variable name
		//a hackaround
		document.querySelector(".green").addEventListener("click", function(){
			var str = "This box number " + self.position + " and it is " + self.color;
			alert(str);
		});
	}
}
box5.clickMe();

//ES6
const box6 = {
	color: "green",
	position: 1,
	clickMe: function(){
		document.querySelector(".green").addEventListener("click", () => {
			var str = "This box number " + this.position + " and it is " + this.color;
			alert(str);
		});
	}
}
box6.clickMe();

//now you can use the this keyword and replace the function with ()=>{}
//using arrow functions preserves the use of the this key word


function Person(name){
	this.name = name;
}

//ES5
Person.prototype.myFriends5 = function(friends){
	
	var arr = friends.map(function(el){
		return this.name + " is friends with " + el;
	}.bind(this));
	
	console.log(arr);
	
}

var friends = ["Bob", "Gary", "Arun"];
new Person("Sukh").myFriends5(friends);
// name not defined
// is defined when we add the .bind method and pop this into the parenthesis


//ES6
Person.prototype.myFriends6 = function(friends){
	
	var arr = friends.map(el => `${this.name} is friends with  ${el}`);
	
	console.log(arr);
}

new Person("Mike").myFriends6(friends);
